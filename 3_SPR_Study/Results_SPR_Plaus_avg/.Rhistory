# functions
se <- function(
x,
na.rm = FALSE
){
if (na.rm == TRUE) {
sd(x, na.rm=TRUE)/sqrt(length(x[!is.na(x)]))
} else {
sd(x)/sqrt(length(x))
}
}
assign_lists <- function(dt) {
l1 <- dt[(Item == 1 & Condition == "A"),]$ID
l2 <- dt[(Item == 1 & Condition == "B"),]$ID
l3 <- dt[(Item == 1 & Condition == "C"),]$ID
l4 <- dt[(Item == 1 & Condition == "Ad"),]$ID
l5 <- dt[(Item == 1 & Condition == "Bd"),]$ID
l6 <- dt[(Item == 1 & Condition == "Cd"),]$ID
dt$list <- rep(0, nrow(dt))
dt[ID %in% l1,"list"] <- 1
dt[ID %in% l2,"list"] <- 2
dt[ID %in% l3,"list"] <- 3
dt[ID %in% l4,"list"] <- 4
dt[ID %in% l5,"list"] <- 5
dt[ID %in% l6,"list"] <- 6
dt
}
setwd("/Users/chr/Nextcloud/Exp4/Norming/plausibility/")
setwd("/downloads")
setwd("/Downloads")
setwd("/home/Downloads")
# Demog
demog <- fread("demog.txt")
colnames(demog) <- c("time", "ID", "three", "four", "five", "six", "question", "answer")
library(data.table)
# functions
se <- function(
x,
na.rm = FALSE
){
if (na.rm == TRUE) {
sd(x, na.rm=TRUE)/sqrt(length(x[!is.na(x)]))
} else {
sd(x)/sqrt(length(x))
}
}
assign_lists <- function(dt) {
l1 <- dt[(Item == 1 & Condition == "A"),]$ID
l2 <- dt[(Item == 1 & Condition == "B"),]$ID
l3 <- dt[(Item == 1 & Condition == "C"),]$ID
l4 <- dt[(Item == 1 & Condition == "Ad"),]$ID
l5 <- dt[(Item == 1 & Condition == "Bd"),]$ID
l6 <- dt[(Item == 1 & Condition == "Cd"),]$ID
dt$list <- rep(0, nrow(dt))
dt[ID %in% l1,"list"] <- 1
dt[ID %in% l2,"list"] <- 2
dt[ID %in% l3,"list"] <- 3
dt[ID %in% l4,"list"] <- 4
dt[ID %in% l5,"list"] <- 5
dt[ID %in% l6,"list"] <- 6
dt
}
setwd("/home/Downloads")
assign_lists <- function(dt) {
l1 <- dt[(Item == 1 & Condition == "A"),]$ID
l2 <- dt[(Item == 1 & Condition == "B"),]$ID
l3 <- dt[(Item == 1 & Condition == "C"),]$ID
l4 <- dt[(Item == 1 & Condition == "Ad"),]$ID
l5 <- dt[(Item == 1 & Condition == "Bd"),]$ID
l6 <- dt[(Item == 1 & Condition == "Cd"),]$ID
dt$list <- rep(0, nrow(dt))
dt[ID %in% l1,"list"] <- 1
dt[ID %in% l2,"list"] <- 2
dt[ID %in% l3,"list"] <- 3
dt[ID %in% l4,"list"] <- 4
dt[ID %in% l5,"list"] <- 5
dt[ID %in% l6,"list"] <- 6
dt
}
setwd("~/home/Downloads")
# Demog
demog <- fread("demog.txt")
debugSource("~/Downloads/plaus_changed.r", echo=TRUE)
debugSource("~/Downloads/plaus_changed.r", echo=TRUE)
debugSource("~/Downloads/plaus_changed.r", echo=TRUE)
debugSource("~/Downloads/plaus_changed.r", echo=TRUE)
debugSource("~/Downloads/plaus_changed.r")
debugSource("~/Downloads/plaus_changed.r")
debugSource("~/Downloads/plaus_changed.r")
debugSource("~/Downloads/plaus_changed.r", echo=TRUE)
debugSource("~/Downloads/plaus_changed.r", echo=TRUE)
debugSource("~/Downloads/plaus_changed.r")
assign_lists <- function(dt) {
l1 <- dt[(Item == 1 & Condition == "A"),]$ID
assign_lists <- function(dt) {
l1 <- dt[(Item == 1 & Condition == "A"),]$ID
assign_lists <- function(dt) {
l1 <- dt[(Item == 1 & Condition == "A"),]$ID
assign_lists <- function(dt) {
l1 <- dt[(Item == 1 & Condition == "A"),]$ID
library(data.table)
# functions
se <- function(
x,
na.rm = FALSE
){
if (na.rm == TRUE) {
sd(x, na.rm=TRUE)/sqrt(length(x[!is.na(x)]))
} else {
sd(x)/sqrt(length(x))
}
}
assign_lists <- function(dt) {
l1 <- dt[(Item == 1 & Condition == "A"),]$ID
l2 <- dt[(Item == 1 & Condition == "B"),]$ID
l3 <- dt[(Item == 1 & Condition == "C"),]$ID
l4 <- dt[(Item == 1 & Condition == "Ad"),]$ID
l5 <- dt[(Item == 1 & Condition == "Bd"),]$ID
l6 <- dt[(Item == 1 & Condition == "Cd"),]$ID
print(nrow(dt))
dt$list <- rep(0, nrow(dt))
dt[ID %in% l1,"list"] <- 1
dt[ID %in% l2,"list"] <- 2
dt[ID %in% l3,"list"] <- 3
dt[ID %in% l4,"list"] <- 4
dt[ID %in% l5,"list"] <- 5
dt[ID %in% l6,"list"] <- 6
dt
}
setwd("~/Downloads/")
# Demog
demog <- fread("demog.txt")
# colnames(demog) <- c("time", "ID", "three", "four", "five", "six", "question", "answer")
colnames(demog) <- c("time", "ID", "three", "four", "five", "six", "seven", "question", "answer")
demog[,c("three", "four", "five", "six")] <- NULL
demog <- dcast(demog, time + ID ~ question, value.var="answer")
demog <- demog[time > 1634211007,]
debugSource("~/Downloads/plaus_changed.r")
### LMER ###
# load lme4 package
library(lme4)
#library(lmerTest)
library(dplyr)
library(ggplot2)
setwd("~/Downloads/Master_Thesis/3_SPR_Study/Results_SPR_Plaus_avg/")
GP6 <- read.csv("GP6SPR_processed.csv")
residuals <- data.frame(
Region = character(0),
Condition = character(0),
Residual = numeric(0),
SE_Residual = numeric(0)
)
logRT_estimated <- data.frame(
Region = character(0),
Condition = character(0),
Estimated_logRT = numeric(0),
SE_Estimated = numeric(0)
)
p_values <- data.frame(
Region = character(0),
p_value_plausibility_target = numeric(0),
p_value_surprisal_distractor = numeric(0),
p_value_precrit = numeric(0)
)
SPR_coefficients <- data.frame(
Region = character(0),
Estimate = character(0),
Estimate_value = numeric(0),
Estimate_error = numeric(0),
Z_value = numeric(0)
)
regions <- c("Pre-critical", "Critical", "Spillover", "Post-spillover")
conditions <- c("A", "B", "C")
for (region in regions)
{
# Precritical region
region_subset <- subset(GP6, Region == region)
# standardise predictors
region_subset$scaled_Plaus_per_region <- scale(region_subset$SPR_Plaus_avg)
region_subset$scaled_Surprisaldist_per_region <- scale(region_subset$Surprisal_distractor)
region_subset$scaled_precrit_RT_per_region <- scale(region_subset$precritRT)
# invert predictor plausibility
region_subset$inverted_scaled_Plaus_per_region <- (region_subset$scaled_Plaus_per_region) * (-1)
#log transform reading times
region_subset$logRT_per_region <- log(region_subset$ReadingTime)
# define and run the linear mixed-effects regression model for the precritical region
model_per_region <-  lmer(logRT_per_region ~ inverted_scaled_Plaus_per_region + scaled_Surprisaldist_per_region + scaled_precrit_RT_per_region +
(1 + inverted_scaled_Plaus_per_region + scaled_Surprisaldist_per_region + scaled_precrit_RT_per_region | Subject) +
(1 + inverted_scaled_Plaus_per_region + scaled_Surprisaldist_per_region + scaled_precrit_RT_per_region | Item), data = region_subset)
# print the summary of the model
summary_per_region <- summary(model_per_region)
print(summary_per_region)
# calculate p-values
# p_values_per_region <- summary_per_region$coefficients[, "Pr(>|t|)"]
#new_row_p_value <- data.frame(Region = region,
#                             p_value_plausibility_target = p_values_per_region[2],
#                            p_value_surprisal_distractor = p_values_per_region[3],
#                           p_value_precrit = p_values_per_region[4])
#p_values <- rbind(p_values, new_row_p_value)
# extract intercept and coefficients added to intercept
coefficients_per_region <- summary_per_region$coefficients
intercept <- coefficients_per_region["(Intercept)", 1]
plaus_target_coeff <- coefficients_per_region["(Intercept)", 1] + coefficients_per_region["inverted_scaled_Plaus_per_region", 1]
surprisal_distractor_coeff <- coefficients_per_region["(Intercept)", 1] + coefficients_per_region["scaled_Surprisaldist_per_region", 1]
precritRT_coeff <- coefficients_per_region["(Intercept)", 1] + coefficients_per_region["scaled_precrit_RT_per_region", 1]
# add error bars for coefficients and intercept
new_row_coefficient <- data.frame(Region = region,
Estimate = "Intercept",
Estimate_value = intercept,
Estimate_error = coefficients_per_region["(Intercept)", 2],
Z_value = 0)
SPR_coefficients <- rbind(SPR_coefficients, new_row_coefficient)
new_row_coefficient <- data.frame(Region = region,
Estimate = "Plausability",
Estimate_value = plaus_target_coeff,
Estimate_error = coefficients_per_region["inverted_scaled_Plaus_per_region", 2],
Z_value = coefficients_per_region["inverted_scaled_Plaus_per_region", 1] / coefficients_per_region["inverted_scaled_Plaus_per_region", 2])
SPR_coefficients <- rbind(SPR_coefficients, new_row_coefficient)
new_row_coefficient <- data.frame(Region = region,
Estimate = "Surprisal",
Estimate_value = surprisal_distractor_coeff,
Estimate_error = coefficients_per_region["scaled_Surprisaldist_per_region", 2],
Z_value = coefficients_per_region["scaled_Surprisaldist_per_region", 1] / coefficients_per_region["scaled_Surprisaldist_per_region", 2])
SPR_coefficients <- rbind(SPR_coefficients, new_row_coefficient)
new_row_coefficient <- data.frame(Region = region,
Estimate = "PrecritRT",
Estimate_value = precritRT_coeff,
Estimate_error = coefficients_per_region["scaled_precrit_RT_per_region", 2],
Z_value = coefficients_per_region["scaled_precrit_RT_per_region", 1] / coefficients_per_region["scaled_precrit_RT_per_region", 2])
SPR_coefficients <- rbind(SPR_coefficients, new_row_coefficient)
for (condition in conditions)
{
#####predict condition A, precritical#####
region_per_condition <- subset(region_subset, Condition == condition)
region_per_condition$region_per_condition_Predicted <- predict(model_per_region, newdata = region_per_condition,  type = "response")
# calculate residuals
Residual_region_per_condition <- mean(region_per_condition$logRT_per_region) - mean(region_per_condition$region_per_condition_Predicted)
Residual_region_per_condition
# observed RT for condition A precritical
region_per_condition_logRT_observed <- mean(region_per_condition$logRT_per_region)
# if (condition == "C")
#  {
#  print(region_per_condition_logRT_observed)
# }
# estimated RT for condition A precritical
region_per_condition_logRT_estimated <- mean(region_per_condition$region_per_condition_Predicted)
region_per_condition_logRT_estimated
# calculate standard error for residuals
SE_residuals_region_per_condition <- sqrt(sd(region_per_condition$logRT, na.rm = TRUE)^2/length(region_per_condition$logRT) + sd(region_per_condition$region_per_condition_Predicted, na.rm = TRUE)^2/length(region_per_condition$region_per_condition_Predicted))
new_row_residuals <- data.frame(Region = region, Condition = condition, Residual = Residual_region_per_condition, SE_Residual = SE_residuals_region_per_condition)
residuals <- rbind(residuals, new_row_residuals)
# calculate standard error for logRT estimated
##
SE_estimated_region_per_condition <- sd(region_per_condition$region_per_condition_Predicted, na.rm = TRUE) / sqrt(length(region_per_condition$region_per_condition_Predicted))
new_row_logRT_estimated <- data.frame(Region = region, Condition = condition, Estimated_logRT = region_per_condition_logRT_estimated, SE_Estimated = SE_estimated_region_per_condition)
logRT_estimated <- rbind(logRT_estimated, new_row_logRT_estimated)
}
}
