new_row_p_value <- data.frame(Region = region,
p_value_plausibility_target = p_values_per_region[2],
p_value_surprisal_distractor = p_values_per_region[3])
p_values <- rbind(p_values, new_row_p_value)
# extract intercept and coefficients added to intercept
coefficients_per_region <- summary_per_region$coefficients
intercept <- coefficients_per_region["(Intercept)", 1]
plaus_target_coeff <- coefficients_per_region["(Intercept)", 1] + coefficients_per_region["inverted_scaled_Plaus_per_region", 1]
surprisal_distractor_coeff <- coefficients_per_region["(Intercept)", 1] + coefficients_per_region["scaled_Surprisaldist_per_region", 1]
# add error bars for coefficients and intercept
new_row_coefficient <- data.frame(Region = region,
Estimate = "Intercept",
Estimate_value = intercept,
Estimate_error = coefficients_per_region["(Intercept)", 2],
Z_value = 0)
SPR_coefficients <- rbind(SPR_coefficients, new_row_coefficient)
new_row_coefficient <- data.frame(Region = region,
Estimate = "Plausability",
Estimate_value = plaus_target_coeff,
Estimate_error = coefficients_per_region["inverted_scaled_Plaus_per_region", 2],
Z_value = coefficients_per_region["inverted_scaled_Plaus_per_region", 1] / coefficients_per_region["inverted_scaled_Plaus_per_region", 2])
SPR_coefficients <- rbind(SPR_coefficients, new_row_coefficient)
new_row_coefficient <- data.frame(Region = region,
Estimate = "Surprisal",
Estimate_value = surprisal_distractor_coeff,
Estimate_error = coefficients_per_region["scaled_Surprisaldist_per_region", 2],
Z_value = coefficients_per_region["scaled_Surprisaldist_per_region", 1] / coefficients_per_region["scaled_Surprisaldist_per_region", 2])
SPR_coefficients <- rbind(SPR_coefficients, new_row_coefficient)
for (condition in conditions)
{
#####predict condition A, precritical#####
region_per_condition <- subset(region_subset, Condition == condition)
region_per_condition$region_per_condition_Predicted <- predict(model_per_region, newdata = region_per_condition,  type = "response")
#if (condition == "C")
#{
#filtered_values_rating_1 <- region_per_condition$region_per_condition_Predicted[(region_per_condition$Condition == "C" & region_per_condition$SPR_Plaus_Rating == 1)]
#filtered_values_rating_2 <- region_per_condition$region_per_condition_Predicted[(region_per_condition$Condition == "C" & region_per_condition$SPR_Plaus_Rating == 2)]
#filtered_values_rating_3 <- region_per_condition$region_per_condition_Predicted[(region_per_condition$Condition == "C" & region_per_condition$SPR_Plaus_Rating == 3)]
#mean_rating_1 <- mean(as.numeric(filtered_values_rating_1),na.rm=TRUE)
#mean_rating_2 <- mean(as.numeric(filtered_values_rating_2),na.rm=TRUE)
#mean_rating_3 <- mean(as.numeric(filtered_values_rating_3),na.rm=TRUE)
#print(mean_rating_1)
#}
# calculate residuals
Residual_region_per_condition <- mean(region_per_condition$logRT_per_region) - mean(region_per_condition$region_per_condition_Predicted, na.rm = TRUE)
Residual_region_per_condition
# observed RT for condition A precritical
region_per_condition_logRT_observed <- mean(region_per_condition$logRT_per_region)
# estimated RT for condition A precritical
region_per_condition_logRT_estimated <- mean(region_per_condition$region_per_condition_Predicted, na.rm = TRUE)
region_per_condition_logRT_estimated
# calculate standard error for residuals
SE_residuals_region_per_condition <- sqrt(sd(region_per_condition$logRT, na.rm = TRUE)^2/length(region_per_condition$logRT) + sd(region_per_condition$region_per_condition_Predicted, na.rm = TRUE)^2/length(region_per_condition$region_per_condition_Predicted))
new_row_residuals <- data.frame(Region = region, Condition = condition, Residual = Residual_region_per_condition, SE_Residual = SE_residuals_region_per_condition)
residuals <- rbind(residuals, new_row_residuals)
# calculate standard error for logRT estimated
##
SE_estimated_region_per_condition <- sd(region_per_condition$region_per_condition_Predicted, na.rm = TRUE) / sqrt(length(region_per_condition$region_per_condition_Predicted))
new_row_logRT_estimated <- data.frame(Region = region, Condition = condition, Estimated_logRT = region_per_condition_logRT_estimated, SE_Estimated = SE_estimated_region_per_condition)
logRT_estimated <- rbind(logRT_estimated, new_row_logRT_estimated)
}
}
# plot residuals
# Create a line plot
p <- ggplot(residuals, aes(x = factor(Region, levels = c("Pre-critical", "Critical", "Spillover", "Post-spillover")),
y = Residual, color = Condition, group = Condition)) + geom_point(shape = 4, size = 3.5, stroke = 0.4) + geom_line(linewidth=0.5) + ylim (0.10, -0.10)
p <- p + theme_minimal() + geom_errorbar(aes(ymin=Residual-SE_Residual, ymax=Residual+SE_Residual), width=.1, size=0.3)
p <- p + scale_color_manual(name="Condition", labels=c("A: Plausible", "B: Medium Plausible", "C: Implausible"), values=c("#000000", "#FF0000", "#0000FF"))
p <- p + labs(x="Region", y="logRT", title = "Residuals")
p <- p + theme(legend.position="bottom", legend.text=element_text(size=7), legend.title=element_text(size=7), axis.title.x = element_text(size = 14), axis.title.y = element_text(size = 14))
p
ggsave("Residuals_Plot.pdf", p, width=4, height=4)
# plot estimated logRTs
# Create a line plot
p <- ggplot(logRT_estimated, aes(x = factor(Region, levels = c("Pre-critical", "Critical", "Spillover", "Post-spillover")),
y = Estimated_logRT, color = Condition, group = Condition)) + geom_point(shape = 4, size = 3.5, stroke = 0.4) + geom_line(linewidth=0.5) + ylim (5.5, 5.7)
p <- p + theme_minimal() + geom_errorbar(aes(ymin=Estimated_logRT-SE_Estimated, ymax=Estimated_logRT+SE_Estimated), width=.1, size=0.3)
p <- p + scale_color_manual(name="Condition", labels=c("A: Plausible", "B: Medium Plausible", "C: Implausible"), values=c("#000000", "#FF0000", "#0000FF"))
p <- p + labs(x="Region", y="logRT", title = "Estimated RTs")
p <- p + theme(legend.position="bottom", legend.text=element_text(size=7), legend.title=element_text(size=7), axis.title.x = element_text(size = 14), axis.title.y = element_text(size = 14))
p
ggsave("Estimated_RTs_Plot.pdf", p, width=4, height=4)
# plot intercept and coefficients added to intercept
p <- ggplot(SPR_coefficients, aes(x = factor(Region, levels = c("Pre-critical", "Critical", "Spillover", "Post-spillover")),
y = Estimate_value, color = Estimate, group = Estimate)) + geom_point(shape = 4, size = 3.5, stroke = 0.4) + geom_line(linewidth=0.5) + ylim (5.5, 5.7)
p <- p + theme_minimal() + geom_errorbar(aes(ymin=Estimate_value-Estimate_error, ymax=Estimate_value+Estimate_error), width=.1, size=0.3)
p <- p + scale_color_manual(name="Coefficients", labels=c("Intercept", "Target Plausibility", "Distractor Surprisal"), values=c("#000000", "#FF00FF", "#00FFFF"))
p <- p + labs(x="Region", y="SPR Coefficients", title = "Coefficients")
p <- p + theme(legend.position="bottom", legend.text=element_text(size=7), legend.title=element_text(size=7), axis.title.x = element_text(size = 14), axis.title.y = element_text(size = 14))
p
ggsave("Intercept_Coefficients_Plot.pdf", p, width=4, height=4)
# plot effect sizes (z-vaues)
Effect_sizes <- subset(SPR_coefficients, Estimate != 'Intercept')
p <- ggplot(Effect_sizes, aes(x = factor(Region, levels = c("Pre-critical", "Critical", "Spillover", "Post-spillover")),
y = Z_value, color = Estimate, group = Estimate)) + geom_point(shape = 4, size = 3.5, stroke = 0.4) + geom_line(linewidth=0.5) + ylim (-5, 5)
p <- p + geom_hline(yintercept=0, linetype=2)
p <- p + theme_minimal()
p <- p + scale_color_manual(name="Coefficients", labels=c( "Target Plausibility", "Distractor Surprisal"), values=c("#FF00FF", "#00FFFF"))
p <- p + labs(x="Region", y="Z-values", title = "Inferential Statistics")
p <- p + theme(legend.position="bottom", legend.text=element_text(size=7), legend.title=element_text(size=7), axis.title.x = element_text(size = 14), axis.title.y = element_text(size = 14))
p
ggsave("Z_values_Plot.pdf", p, width=4, height=4)
### SPR PARSING AND DATA VIZ
## CHRISTOPH AURNHAMMER, 2021
## Adapted from comp_ibex.r
### PACKAGES
library(ggplot2)
library(data.table)
library(gridExtra)
library(dplyr)
setwd("~/Downloads/Master_Thesis/3_SPR_Study/Filtered_plausibility_ratings/SPR_Study/Results_SPR_Plaus_single/")
source("ibex_fns.r")
#### DATA FORMATTING
# Get DEMOG CONSENT SURVEY data
cn <- get_consent("consent.txt")
dm <- get_demog("demog.txt")
sv <- get_survey("survey.txt")
survey <- merge(dm, sv, by=c("IPhash"), all=TRUE)
survey$Age <- as.numeric(survey$Age)
round(mean(survey$Age),2)
round(sd(survey$Age),2)
range(survey$Age)
table(survey$gender)
nrow(survey[!(Native_language %in% c("Deutsch", "deutsch")),])
table(survey$Task_difficulty)/length(survey$Task_difficulty)
table(survey$Experiment_length)/length(survey$Experiment_length)
table(survey$handedness)
# Get REACTION TIMES & READING TIMES
rc <- get_reacts("task.txt")
pr <- get_plausibility_rating("task.txt")
rd <- get_reads("reading.txt")
df <- merge(rd, rc[,c("ReactionTime", "Accuracy", "IPhash", "Item")], by=c("IPhash", "Item"), all=TRUE)
df <- merge(df, pr[,c("IPhash", "Item", "Condition", "SPR_Plaus_Rating", "SPR_Plaus_avg")], by=c("IPhash", "Item", "Condition"), all=TRUE)
# Change IPhashes to subject numbers
colnames(df)[1] <- "Subject"
df[, Subject := .GRP, by = .(Subject)]
df$Subject <- as.character(df$Subject)
# Done below after obtaining GP6_processed.csv file
# Check accuracies / reaction times per participant
#agg_df <- df[, lapply(.SD, mean, na.rm = TRUE), by=Subject, .SDcols=c("ReactionTime", "Accuracy", "ReadingTime")]
#agg_df$Subject <- as.factor(agg_df$Subject)
#agg_df[order(agg_df$ReactionTime),]
#agg_df[order(agg_df$Accuracy),]
# calculate mean accuracy and mean reaction time
#mean_accuracy <- mean(GP6$Accuracy, na.rm = TRUE)
#cat("Mean Accuracy:", as.numeric(mean_accuracy))
#mean_RT <- mean(GP6$ReactionTime, na.rm = TRUE)
#cat("Mean Reaction Time:", as.numeric(mean_RT))
# merge df with assoc plausibility and surprisal values in pretests
pretests <- fread("GradedP6_FollowUpStudy_Pretests.csv")
df <- merge(df, pretests[,c("Item", "Condition", "Verb", "Target", "Distractor", "Last_Mentioned", "Plaus_target_avg", "Plaus_dist_avg", "Surprisal_target", "Surprisal_distractor")], by=c("Item", "Condition"))
# add precritRT as predictor
df$precritRT <- rep(df[Region=="Pre-critical",]$ReadingTime, each=5)
# change column order
df <- df %>% relocate(precritRT, .before= ReadingTime)
# save merged files in new csv file
fwrite(df, "GP6SPR.csv")
# Verb length per cond
# df$ncharverb <- nchar(df$Verb)
# aggregate(ncharverb ~ Condition, df, mean)
### REMOVING OUTLIERS IN READING TIME AND REACTION TIME DATA
# Remove too high or low reading times and reaction times
df <- remove_outliers(df)
fwrite(df, "GP6SPR_processed.csv")
##### CHECK ACCURACIES AND READING TIMES #####
# saved df into GP6 csv file because when reading GP6 from the scratch it cannot be processed by the following functions
# GP6 <- read.csv("GP6SPR_processed.csv")
GP6 <- df
test <- GP6[Condition == "C" & (SPR_Plaus_Rating == 1 | SPR_Plaus_Rating == 2 | SPR_Plaus_Rating == 3)]
condition_A <- GP6$Condition == "A" & (GP6$SPR_Plaus_Rating == 5 | GP6$SPR_Plaus_Rating == 6 | GP6$SPR_Plaus_Rating == 7)
condition_B <- GP6$Condition == "B" & (GP6$SPR_Plaus_Rating == 3 | GP6$SPR_Plaus_Rating == 4 | GP6$SPR_Plaus_Rating == 5)
condition_C <- GP6$Condition == "C" & (GP6$SPR_Plaus_Rating == 1 | GP6$SPR_Plaus_Rating == 2 | GP6$SPR_Plaus_Rating == 3)
# should only remove ratings for values in SPR_Plaus_Rating column for some participants and not
# the values of other columns for the same rows as well
GP6$SPR_Plaus_Rating[!(condition_A | condition_B | condition_C)] <- NA
fwrite(GP6, "GP6_filtered.csv")
# Check mean accuracies / mean reaction times PER PARTICIPANT
###calculate mean Reaction Time and Accuracy per subject ### just for info, is not included in thesis
# removed rows where reaction time was NA, because otherwise the lapply method includes them in the mean calculation which makes the mean lower
GP6 <- GP6[!(ReactionTime %in% c(NA)),] #remove rows
GP6 <- GP6[, lapply(.SD, mean, na.rm = TRUE), by=Subject, .SDcols=c("ReactionTime", "Accuracy")] #mean of accuracy and reaction time per subject
GP6$Subject <- as.factor(GP6$Subject)
GP6[order(GP6$ReactionTime),] #grouped  by reaction time
GP6[order(GP6$Accuracy),] # grouped by accuracy
# calculate mean accuracy and mean reaction time OF ALL PARTICIPANTS (based on rows containing reaction times and accuracy)
mean_accuracy <- mean(GP6$Accuracy, na.rm = TRUE)
cat("Mean Accuracy:", as.numeric(mean_accuracy))
mean_RT <- mean(GP6$ReactionTime, na.rm = TRUE)
cat("Mean Reaction Time:", as.numeric(mean_RT))
# calculate sd of accuracy and sd of reaction time of all participants
sd_accuracy <- sd(GP6$Accuracy, na.rm = TRUE)
cat("SD:", as.numeric(sd_accuracy))
sd_RT <- sd(GP6$ReactionTime, na.rm = TRUE)
cat("SD:", as.numeric(sd_RT))
# calculate range of accuracy and range of reaction time of all participants
range_accuracy <- range(GP6$Accuracy, na.rm = TRUE)
cat("Minimum value:", as.numeric(range_accuracy[1]), "\n")
cat("Maximum value:", as.numeric(range_accuracy[2]), "\n")
range_RT <- range(GP6$ReactionTime, na.rm = TRUE)
cat("Minimum value:", as.numeric(range_RT[1]), "\n")
cat("Maximum value:", as.numeric(range_RT[2]), "\n")
# calculate mean accuracies and mean reaction times PER PARTICIPANT AND CONDITION
#again rename df into GP6 because loading the GP6 csv file causes an error
#GP6 <- read.csv("GP6SPR_processed.csv")
#GP6 <- df uncommented this line in order to use GP6 with filtered ratings from above to plot also observed RTs based on filtered reading times
GP6 <- GP6[!(ReactionTime %in% c(NA)),] #remove rows containing NA for reaction time and accuracy
conditions <- c("A", "B", "C")
for (condition in conditions)
{
GP6_per_condition <- GP6[(Condition %in% c(condition)),] #subset condition
GP6_per_condition <- GP6_per_condition[, lapply(.SD, mean, na.rm = TRUE), by=Subject, .SDcols=c("ReactionTime", "Accuracy")]
GP6_per_condition[order(GP6_per_condition$ReactionTime),] #grouped  by reaction time
GP6_per_condition[order(GP6_per_condition$Accuracy),] # grouped by accuracy
#caclulate mean reaction time and accuracy per condition
mean_accuracy <- mean(GP6_per_condition$Accuracy, na.rm = TRUE)
cat("Mean Accuracy:", as.numeric(mean_accuracy), "\n")
mean_RT <- mean(GP6_per_condition$ReactionTime, na.rm = TRUE)
cat("Mean Reaction Time:", as.numeric(mean_RT), "\n")
#calculate sd of accuracy and sd of reaction time of all participants
sd_accuracy <- sd(GP6_per_condition$Accuracy, na.rm = TRUE)
cat("SD:", as.numeric(sd_accuracy), "\n")
sd_RT <- sd(GP6_per_condition$ReactionTime, na.rm = TRUE)
cat("SD:", as.numeric(sd_RT), "\n")
# calculate range of accuracy and range of reaction time of all participants
range_accuracy <- range(GP6_per_condition$Accuracy, na.rm = TRUE)
cat("Minimum value:", as.numeric(range_accuracy[1]), "\n")
cat("Maximum value:", as.numeric(range_accuracy[2]), "\n")
range_RT <- range(GP6_per_condition$ReactionTime, na.rm = TRUE)
cat("Minimum value:", as.numeric(range_RT[1]), "\n")
cat("Maximum value:", as.numeric(range_RT[2]), "\n")
}
### SPR PARSING AND DATA VIZ
## CHRISTOPH AURNHAMMER, 2021
## Adapted from comp_ibex.r
### PACKAGES
library(ggplot2)
library(data.table)
library(gridExtra)
library(dplyr)
setwd("~/Downloads/Master_Thesis/3_SPR_Study/Filtered_plausibility_ratings/SPR_Study/Results_SPR_Plaus_single/")
source("ibex_fns.r")
#### DATA FORMATTING
# Get DEMOG CONSENT SURVEY data
cn <- get_consent("consent.txt")
dm <- get_demog("demog.txt")
sv <- get_survey("survey.txt")
survey <- merge(dm, sv, by=c("IPhash"), all=TRUE)
survey$Age <- as.numeric(survey$Age)
round(mean(survey$Age),2)
round(sd(survey$Age),2)
range(survey$Age)
table(survey$gender)
nrow(survey[!(Native_language %in% c("Deutsch", "deutsch")),])
table(survey$Task_difficulty)/length(survey$Task_difficulty)
table(survey$Experiment_length)/length(survey$Experiment_length)
table(survey$handedness)
# Get REACTION TIMES & READING TIMES
rc <- get_reacts("task.txt")
pr <- get_plausibility_rating("task.txt")
rd <- get_reads("reading.txt")
df <- merge(rd, rc[,c("ReactionTime", "Accuracy", "IPhash", "Item")], by=c("IPhash", "Item"), all=TRUE)
df <- merge(df, pr[,c("IPhash", "Item", "Condition", "SPR_Plaus_Rating", "SPR_Plaus_avg")], by=c("IPhash", "Item", "Condition"), all=TRUE)
# Change IPhashes to subject numbers
colnames(df)[1] <- "Subject"
df[, Subject := .GRP, by = .(Subject)]
df$Subject <- as.character(df$Subject)
# Done below after obtaining GP6_processed.csv file
# Check accuracies / reaction times per participant
#agg_df <- df[, lapply(.SD, mean, na.rm = TRUE), by=Subject, .SDcols=c("ReactionTime", "Accuracy", "ReadingTime")]
#agg_df$Subject <- as.factor(agg_df$Subject)
#agg_df[order(agg_df$ReactionTime),]
#agg_df[order(agg_df$Accuracy),]
# calculate mean accuracy and mean reaction time
#mean_accuracy <- mean(GP6$Accuracy, na.rm = TRUE)
#cat("Mean Accuracy:", as.numeric(mean_accuracy))
#mean_RT <- mean(GP6$ReactionTime, na.rm = TRUE)
#cat("Mean Reaction Time:", as.numeric(mean_RT))
# merge df with assoc plausibility and surprisal values in pretests
pretests <- fread("GradedP6_FollowUpStudy_Pretests.csv")
df <- merge(df, pretests[,c("Item", "Condition", "Verb", "Target", "Distractor", "Last_Mentioned", "Plaus_target_avg", "Plaus_dist_avg", "Surprisal_target", "Surprisal_distractor")], by=c("Item", "Condition"))
# add precritRT as predictor
df$precritRT <- rep(df[Region=="Pre-critical",]$ReadingTime, each=5)
# change column order
df <- df %>% relocate(precritRT, .before= ReadingTime)
# save merged files in new csv file
fwrite(df, "GP6SPR.csv")
# Verb length per cond
# df$ncharverb <- nchar(df$Verb)
# aggregate(ncharverb ~ Condition, df, mean)
### REMOVING OUTLIERS IN READING TIME AND REACTION TIME DATA
# Remove too high or low reading times and reaction times
df <- remove_outliers(df)
fwrite(df, "GP6SPR_processed.csv")
##### CHECK ACCURACIES AND READING TIMES #####
# saved df into GP6 csv file because when reading GP6 from the scratch it cannot be processed by the following functions
# GP6 <- read.csv("GP6SPR_processed.csv")
GP6 <- df
test <- GP6[Condition == "C" & (SPR_Plaus_Rating == 1 | SPR_Plaus_Rating == 2 | SPR_Plaus_Rating == 3)]
condition_A <- GP6$Condition == "A" & (GP6$SPR_Plaus_Rating == 5 | GP6$SPR_Plaus_Rating == 6 | GP6$SPR_Plaus_Rating == 7)
condition_B <- GP6$Condition == "B" & (GP6$SPR_Plaus_Rating == 3 | GP6$SPR_Plaus_Rating == 4 | GP6$SPR_Plaus_Rating == 5)
condition_C <- GP6$Condition == "C" & (GP6$SPR_Plaus_Rating == 1 | GP6$SPR_Plaus_Rating == 2 | GP6$SPR_Plaus_Rating == 3)
# should only remove ratings for values in SPR_Plaus_Rating column for some participants and not
# the values of other columns for the same rows as well
GP6$SPR_Plaus_Rating[!(condition_A | condition_B | condition_C)] <- NA
fwrite(GP6, "GP6_filtered.csv")
df_filtered <- GP6
### SPR PARSING AND DATA VIZ
## CHRISTOPH AURNHAMMER, 2021
## Adapted from comp_ibex.r
### PACKAGES
library(ggplot2)
library(data.table)
library(gridExtra)
library(dplyr)
setwd("~/Downloads/Master_Thesis/3_SPR_Study/Filtered_plausibility_ratings/SPR_Study/Results_SPR_Plaus_single/")
source("ibex_fns.r")
#### DATA FORMATTING
# Get DEMOG CONSENT SURVEY data
cn <- get_consent("consent.txt")
dm <- get_demog("demog.txt")
sv <- get_survey("survey.txt")
survey <- merge(dm, sv, by=c("IPhash"), all=TRUE)
survey$Age <- as.numeric(survey$Age)
round(mean(survey$Age),2)
round(sd(survey$Age),2)
range(survey$Age)
table(survey$gender)
nrow(survey[!(Native_language %in% c("Deutsch", "deutsch")),])
table(survey$Task_difficulty)/length(survey$Task_difficulty)
table(survey$Experiment_length)/length(survey$Experiment_length)
table(survey$handedness)
# Get REACTION TIMES & READING TIMES
rc <- get_reacts("task.txt")
pr <- get_plausibility_rating("task.txt")
rd <- get_reads("reading.txt")
df <- merge(rd, rc[,c("ReactionTime", "Accuracy", "IPhash", "Item")], by=c("IPhash", "Item"), all=TRUE)
df <- merge(df, pr[,c("IPhash", "Item", "Condition", "SPR_Plaus_Rating", "SPR_Plaus_avg")], by=c("IPhash", "Item", "Condition"), all=TRUE)
# Change IPhashes to subject numbers
colnames(df)[1] <- "Subject"
df[, Subject := .GRP, by = .(Subject)]
df$Subject <- as.character(df$Subject)
# Done below after obtaining GP6_processed.csv file
# Check accuracies / reaction times per participant
#agg_df <- df[, lapply(.SD, mean, na.rm = TRUE), by=Subject, .SDcols=c("ReactionTime", "Accuracy", "ReadingTime")]
#agg_df$Subject <- as.factor(agg_df$Subject)
#agg_df[order(agg_df$ReactionTime),]
#agg_df[order(agg_df$Accuracy),]
# calculate mean accuracy and mean reaction time
#mean_accuracy <- mean(GP6$Accuracy, na.rm = TRUE)
#cat("Mean Accuracy:", as.numeric(mean_accuracy))
#mean_RT <- mean(GP6$ReactionTime, na.rm = TRUE)
#cat("Mean Reaction Time:", as.numeric(mean_RT))
# merge df with assoc plausibility and surprisal values in pretests
pretests <- fread("GradedP6_FollowUpStudy_Pretests.csv")
df <- merge(df, pretests[,c("Item", "Condition", "Verb", "Target", "Distractor", "Last_Mentioned", "Plaus_target_avg", "Plaus_dist_avg", "Surprisal_target", "Surprisal_distractor")], by=c("Item", "Condition"))
# add precritRT as predictor
df$precritRT <- rep(df[Region=="Pre-critical",]$ReadingTime, each=5)
# change column order
df <- df %>% relocate(precritRT, .before= ReadingTime)
# save merged files in new csv file
fwrite(df, "GP6SPR.csv")
# Verb length per cond
# df$ncharverb <- nchar(df$Verb)
# aggregate(ncharverb ~ Condition, df, mean)
### REMOVING OUTLIERS IN READING TIME AND REACTION TIME DATA
# Remove too high or low reading times and reaction times
df <- remove_outliers(df)
fwrite(df, "GP6SPR_processed.csv")
##### CHECK ACCURACIES AND READING TIMES #####
# saved df into GP6 csv file because when reading GP6 from the scratch it cannot be processed by the following functions
# GP6 <- read.csv("GP6SPR_processed.csv")
GP6 <- df
test <- GP6[Condition == "C" & (SPR_Plaus_Rating == 1 | SPR_Plaus_Rating == 2 | SPR_Plaus_Rating == 3)]
condition_A <- GP6$Condition == "A" & (GP6$SPR_Plaus_Rating == 5 | GP6$SPR_Plaus_Rating == 6 | GP6$SPR_Plaus_Rating == 7)
condition_B <- GP6$Condition == "B" & (GP6$SPR_Plaus_Rating == 3 | GP6$SPR_Plaus_Rating == 4 | GP6$SPR_Plaus_Rating == 5)
condition_C <- GP6$Condition == "C" & (GP6$SPR_Plaus_Rating == 1 | GP6$SPR_Plaus_Rating == 2 | GP6$SPR_Plaus_Rating == 3)
# should only remove ratings for values in SPR_Plaus_Rating column for some participants and not
# the values of other columns for the same rows as well
GP6$SPR_Plaus_Rating[!(condition_A | condition_B | condition_C)] <- NA
fwrite(GP6, "GP6_filtered.csv")
View(GP6)
### SPR PARSING AND DATA VIZ
## CHRISTOPH AURNHAMMER, 2021
## Adapted from comp_ibex.r
### PACKAGES
library(ggplot2)
library(data.table)
library(gridExtra)
library(dplyr)
setwd("~/Downloads/Master_Thesis/3_SPR_Study/Filtered_plausibility_ratings/SPR_Study/Results_SPR_Plaus_single/")
source("ibex_fns.r")
#### DATA FORMATTING
# Get DEMOG CONSENT SURVEY data
cn <- get_consent("consent.txt")
dm <- get_demog("demog.txt")
sv <- get_survey("survey.txt")
survey <- merge(dm, sv, by=c("IPhash"), all=TRUE)
survey$Age <- as.numeric(survey$Age)
round(mean(survey$Age),2)
round(sd(survey$Age),2)
range(survey$Age)
table(survey$gender)
nrow(survey[!(Native_language %in% c("Deutsch", "deutsch")),])
table(survey$Task_difficulty)/length(survey$Task_difficulty)
table(survey$Experiment_length)/length(survey$Experiment_length)
table(survey$handedness)
# Get REACTION TIMES & READING TIMES
rc <- get_reacts("task.txt")
pr <- get_plausibility_rating("task.txt")
rd <- get_reads("reading.txt")
df <- merge(rd, rc[,c("ReactionTime", "Accuracy", "IPhash", "Item")], by=c("IPhash", "Item"), all=TRUE)
df <- merge(df, pr[,c("IPhash", "Item", "Condition", "SPR_Plaus_Rating", "SPR_Plaus_avg")], by=c("IPhash", "Item", "Condition"), all=TRUE)
# Change IPhashes to subject numbers
colnames(df)[1] <- "Subject"
df[, Subject := .GRP, by = .(Subject)]
df$Subject <- as.character(df$Subject)
# Done below after obtaining GP6_processed.csv file
# Check accuracies / reaction times per participant
#agg_df <- df[, lapply(.SD, mean, na.rm = TRUE), by=Subject, .SDcols=c("ReactionTime", "Accuracy", "ReadingTime")]
#agg_df$Subject <- as.factor(agg_df$Subject)
#agg_df[order(agg_df$ReactionTime),]
#agg_df[order(agg_df$Accuracy),]
# calculate mean accuracy and mean reaction time
#mean_accuracy <- mean(GP6$Accuracy, na.rm = TRUE)
#cat("Mean Accuracy:", as.numeric(mean_accuracy))
#mean_RT <- mean(GP6$ReactionTime, na.rm = TRUE)
#cat("Mean Reaction Time:", as.numeric(mean_RT))
# merge df with assoc plausibility and surprisal values in pretests
pretests <- fread("GradedP6_FollowUpStudy_Pretests.csv")
df <- merge(df, pretests[,c("Item", "Condition", "Verb", "Target", "Distractor", "Last_Mentioned", "Plaus_target_avg", "Plaus_dist_avg", "Surprisal_target", "Surprisal_distractor")], by=c("Item", "Condition"))
# add precritRT as predictor
df$precritRT <- rep(df[Region=="Pre-critical",]$ReadingTime, each=5)
# change column order
df <- df %>% relocate(precritRT, .before= ReadingTime)
# save merged files in new csv file
fwrite(df, "GP6SPR.csv")
# Verb length per cond
# df$ncharverb <- nchar(df$Verb)
# aggregate(ncharverb ~ Condition, df, mean)
### REMOVING OUTLIERS IN READING TIME AND REACTION TIME DATA
# Remove too high or low reading times and reaction times
df <- remove_outliers(df)
fwrite(df, "GP6SPR_processed.csv")
##### CHECK ACCURACIES AND READING TIMES #####
# saved df into GP6 csv file because when reading GP6 from the scratch it cannot be processed by the following functions
# GP6 <- read.csv("GP6SPR_processed.csv")
GP6 <- df
test <- GP6[Condition == "C" & (SPR_Plaus_Rating == 1 | SPR_Plaus_Rating == 2 | SPR_Plaus_Rating == 3)]
condition_A <- GP6$Condition == "A" & (GP6$SPR_Plaus_Rating == 5 | GP6$SPR_Plaus_Rating == 6 | GP6$SPR_Plaus_Rating == 7)
condition_B <- GP6$Condition == "B" & (GP6$SPR_Plaus_Rating == 3 | GP6$SPR_Plaus_Rating == 4 | GP6$SPR_Plaus_Rating == 5)
condition_C <- GP6$Condition == "C" & (GP6$SPR_Plaus_Rating == 1 | GP6$SPR_Plaus_Rating == 2 | GP6$SPR_Plaus_Rating == 3)
# should only remove ratings for values in SPR_Plaus_Rating column for some participants and not
# the values of other columns for the same rows as well
GP6$SPR_Plaus_Rating[!(condition_A | condition_B | condition_C)] <- NA
GP6$ReadingTime[!(condition_A | condition_B | condition_C)] <- NA
fwrite(GP6, "GP6_filtered.csv")
GP6_filtered <- fread("GP6_filtered.csv")
# Check mean accuracies / mean reaction times PER PARTICIPANT
###calculate mean Reaction Time and Accuracy per subject ### just for info, is not included in thesis
# removed rows where reaction time was NA, because otherwise the lapply method includes them in the mean calculation which makes the mean lower
GP6_filtered <- GP6_filtered[!(ReactionTime %in% c(NA)),] #remove rows
GP6_filtered <- GP6_filtered[, lapply(.SD, mean, na.rm = TRUE), by=Subject, .SDcols=c("ReactionTime", "Accuracy")] #mean of accuracy and reaction time per subject
GP6_filtered$Subject <- as.factor(GP6_filtered$Subject)
GP6_filtered[order(GP6_filtered$ReactionTime),] #grouped  by reaction time
GP6_filtered[order(GP6_filtered$Accuracy),] # grouped by accuracy
# calculate mean accuracy and mean reaction time OF ALL PARTICIPANTS (based on rows containing reaction times and accuracy)
mean_accuracy <- mean(GP6_filtered$Accuracy, na.rm = TRUE)
cat("Mean Accuracy:", as.numeric(mean_accuracy))
mean_RT <- mean(GP6_filtered$ReactionTime, na.rm = TRUE)
cat("Mean Reaction Time:", as.numeric(mean_RT))
# calculate sd of accuracy and sd of reaction time of all participants
sd_accuracy <- sd(GP6_filtered$Accuracy, na.rm = TRUE)
cat("SD:", as.numeric(sd_accuracy))
sd_RT <- sd(GP6_filtered$ReactionTime, na.rm = TRUE)
cat("SD:", as.numeric(sd_RT))
# calculate range of accuracy and range of reaction time of all participants
range_accuracy <- range(GP6_filtered$Accuracy, na.rm = TRUE)
cat("Minimum value:", as.numeric(range_accuracy[1]), "\n")
cat("Maximum value:", as.numeric(range_accuracy[2]), "\n")
range_RT <- range(GP6_filtered$ReactionTime, na.rm = TRUE)
cat("Minimum value:", as.numeric(range_RT[1]), "\n")
cat("Maximum value:", as.numeric(range_RT[2]), "\n")
# calculate mean accuracies and mean reaction times PER PARTICIPANT AND CONDITION
#again rename df into GP6 because loading the GP6 csv file causes an error
#GP6 <- read.csv("GP6SPR_processed.csv")
#GP6 <- df uncommented this line in order to use GP6 with filtered ratings from above to plot also observed RTs based on filtered reading times
GP6_filtered <- GP6_filtered[!(ReactionTime %in% c(NA)),] #remove rows containing NA for reaction time and accuracy
conditions <- c("A", "B", "C")
for (condition in conditions)
{
GP6_per_condition <- GP6_filtered[(Condition %in% c(condition)),] #subset condition
GP6_per_condition <- GP6_per_condition[, lapply(.SD, mean, na.rm = TRUE), by=Subject, .SDcols=c("ReactionTime", "Accuracy")]
GP6_per_condition[order(GP6_per_condition$ReactionTime),] #grouped  by reaction time
GP6_per_condition[order(GP6_per_condition$Accuracy),] # grouped by accuracy
#caclulate mean reaction time and accuracy per condition
mean_accuracy <- mean(GP6_per_condition$Accuracy, na.rm = TRUE)
cat("Mean Accuracy:", as.numeric(mean_accuracy), "\n")
mean_RT <- mean(GP6_per_condition$ReactionTime, na.rm = TRUE)
cat("Mean Reaction Time:", as.numeric(mean_RT), "\n")
#calculate sd of accuracy and sd of reaction time of all participants
sd_accuracy <- sd(GP6_per_condition$Accuracy, na.rm = TRUE)
cat("SD:", as.numeric(sd_accuracy), "\n")
sd_RT <- sd(GP6_per_condition$ReactionTime, na.rm = TRUE)
cat("SD:", as.numeric(sd_RT), "\n")
# calculate range of accuracy and range of reaction time of all participants
range_accuracy <- range(GP6_per_condition$Accuracy, na.rm = TRUE)
cat("Minimum value:", as.numeric(range_accuracy[1]), "\n")
cat("Maximum value:", as.numeric(range_accuracy[2]), "\n")
range_RT <- range(GP6_per_condition$ReactionTime, na.rm = TRUE)
cat("Minimum value:", as.numeric(range_RT[1]), "\n")
cat("Maximum value:", as.numeric(range_RT[2]), "\n")
}
