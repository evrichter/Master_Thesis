region_per_condition_logRT_estimated <- mean(region_per_condition$region_per_condition_Predicted, na.rm = TRUE)
# calculate residuals (observed logRTs - estimated logRTs)
Residual_region_per_condition <- mean(region_per_condition$logRT_per_region) - mean(region_per_condition$region_per_condition_Predicted, na.rm = TRUE)
# calculate standard error for residuals
SE_residuals_region_per_condition <- sqrt(sd(region_per_condition$logRT, na.rm = TRUE)^2/length(region_per_condition$logRT) + sd(region_per_condition$region_per_condition_Predicted, na.rm = TRUE)^2/length(region_per_condition$region_per_condition_Predicted))
# add to residuals table
new_row_residuals <- data.frame(Region = region, Condition = condition, Residual = Residual_region_per_condition, SE_Residual = SE_residuals_region_per_condition)
residuals <- rbind(residuals, new_row_residuals)
# calculate standard error for estimated logRTs
SE_estimated_region_per_condition <- sd(region_per_condition$region_per_condition_Predicted, na.rm = TRUE) / sqrt(length(region_per_condition$region_per_condition_Predicted))
# add to estimated logRTs table
new_row_logRT_estimated <- data.frame(Region = region, Condition = condition, Estimated_logRT = region_per_condition_logRT_estimated, SE_Estimated = SE_estimated_region_per_condition)
logRT_estimated <- rbind(logRT_estimated, new_row_logRT_estimated)
}
}
### VISUALIZATIONS ###
# Create a line plot for residuals
p <- ggplot(residuals, aes(x = factor(Region, levels = c("Pre-critical", "Critical", "Spillover", "Post-spillover")),
y = Residual, color = Condition, group = Condition)) + geom_point(shape = 4, size = 3.5, stroke = 0.4) + geom_line(linewidth=0.5) + ylim (0.10, -0.10)
p <- p + theme_minimal() + geom_errorbar(aes(ymin=Residual-SE_Residual, ymax=Residual+SE_Residual), width=.1, size=0.3)
p <- p + scale_color_manual(name="Condition", labels=c("A: Plausible", "B: Medium Plausible", "C: Implausible"), values=c("#000000", "#FF0000", "#0000FF"))
p <- p + labs(x="Region", y="logRT", title = "Residuals: Plausibility Target + Surprisal Distractor")
p <- p + theme(legend.position="bottom", legend.text=element_text(size=7), legend.title=element_text(size=7), axis.title.x = element_text(size = 14), axis.title.y = element_text(size = 14))
p
ggsave("Residuals_Plot.pdf", p, width=4, height=4)
# Create a line plot for estimated logRTs
p <- ggplot(logRT_estimated, aes(x = factor(Region, levels = c("Pre-critical", "Critical", "Spillover", "Post-spillover")),
y = Estimated_logRT, color = Condition, group = Condition)) + geom_point(shape = 4, size = 3.5, stroke = 0.4) + geom_line(linewidth=0.5) + ylim (5.4, 5.7)
p <- p + theme_minimal() + geom_errorbar(aes(ymin=Estimated_logRT-SE_Estimated, ymax=Estimated_logRT+SE_Estimated), width=.1, size=0.3)
p <- p + scale_color_manual(name="Condition", labels=c("A: Plausible", "B: Medium Plausible", "C: Implausible"), values=c("#000000", "#FF0000", "#0000FF"))
p <- p + labs(x="Region", y="logRT", title = "Estimated RTs")
p <- p + theme(legend.position="bottom", legend.text=element_text(size=7), legend.title=element_text(size=7), axis.title.x = element_text(size = 14), axis.title.y = element_text(size = 14))
p
ggsave("Estimated_RTs_Plot.pdf", p, width=4, height=4)
# Plot intercept and coefficients added to intercept
p <- ggplot(SPR_coefficients, aes(x = factor(Region, levels = c("Pre-critical", "Critical", "Spillover", "Post-spillover")),
y = Estimate_value, color = Estimate, group = Estimate)) + geom_point(shape = 4, size = 3.5, stroke = 0.4) + geom_line(linewidth=0.5) + ylim (5.5, 5.7)
p <- p + theme_minimal() + geom_errorbar(aes(ymin=Estimate_value-Estimate_error, ymax=Estimate_value+Estimate_error), width=.1, size=0.3)
p <- p + scale_color_manual(name="Coefficients", labels=c("Intercept", "Target Plausibility", "Distractor Surprisal"), values=c("#000000", "#FF00FF", "#00FFFF"))
p <- p + labs(x="Region", y="SPR Coefficients", title = "Coefficients")
p <- p + theme(legend.position="bottom", legend.text=element_text(size=7), legend.title=element_text(size=7), axis.title.x = element_text(size = 14), axis.title.y = element_text(size = 14))
p
ggsave("Intercept_Coefficients_Plot.pdf", p, width=4, height=4)
# plot effect sizes (z-vaues)
Effect_sizes <- subset(SPR_coefficients, Estimate != 'Intercept')
p <- ggplot(Effect_sizes, aes(x = factor(Region, levels = c("Pre-critical", "Critical", "Spillover", "Post-spillover")),
y = Z_value, color = Estimate, group = Estimate)) + geom_point(shape = 4, size = 3.5, stroke = 0.4) + geom_line(linewidth=0.5) + ylim (-5, 5)
p <- p + geom_hline(yintercept=0, linetype=2)
p <- p + theme_minimal()
p <- p + scale_color_manual(name="Coefficients", labels=c( "Target Plausibility", "Distractor Surprisal"), values=c("#FF00FF", "#00FFFF"))
p <- p + labs(x="Region", y="Z-values", title = "Inferential Statistics")
p <- p + theme(legend.position="bottom", legend.text=element_text(size=7), legend.title=element_text(size=7), axis.title.x = element_text(size = 14), axis.title.y = element_text(size = 14))
p
ggsave("Z_values_Plot.pdf", p, width=4, height=4)
### LMER Analysis ###
# load packages
library(lme4)
library(lmerTest) #for printing p-values (results are the same like when using lme4, but causes error message that model failed to converge)
library(dplyr)
library(ggplot2)
setwd("~/Downloads/Master_Thesis/3_SPR_Study/Results_SPR_Plaus_Leo_LM/")
GP6 <- read.csv("GP6SPR_processed.csv") #read file after removing outliers
# create empty tables to add later residuals, estimated logRTs, p-values and coefficients
residuals <- data.frame(
Region = character(0),
Condition = character(0),
Residual = numeric(0),
SE_Residual = numeric(0)
)
logRT_estimated <- data.frame(
Region = character(0),
Condition = character(0),
Estimated_logRT = numeric(0),
SE_Estimated = numeric(0)
)
p_values <- data.frame(
Region = character(0),
p_value_plausibility_target = numeric(0),
p_value_surprisal_distractor = numeric(0)
)
SPR_coefficients <- data.frame(
Region = character(0),
Estimate = character(0),
Estimate_value = numeric(0),
Estimate_error = numeric(0),
Z_value = numeric(0)
)
# define regions and conditions
regions <- c("Pre-critical", "Critical", "Spillover", "Post-spillover")
conditions <- c("A", "B", "C")
### loop through each of the 4 regions ###
for (region in regions)
{
# take subset for each region (precritical, critical, spillover, postspillover)
region_subset <- subset(GP6, Region == region)
# standardise predictors (target plausibility (per-trial) and distractor surprisal (pre-test))
region_subset$scaled_Plaus_per_region <- scale(region_subset$Plaus_target_avg)
region_subset$scaled_Surprisaldist_per_region <- scale(region_subset$LeoLM_dist)
# invert predictor target plausibility
region_subset$inverted_scaled_Plaus_per_region <- (region_subset$scaled_Plaus_per_region) * (-1)
#log transform reading times
region_subset$logRT_per_region <- log(region_subset$ReadingTime)
# fit linear mixed-effects regression model for each region
model_per_region <- lmerTest::lmer(logRT_per_region ~ inverted_scaled_Plaus_per_region + scaled_Surprisaldist_per_region +
(1 + inverted_scaled_Plaus_per_region + scaled_Surprisaldist_per_region | Subject) +
(1 + inverted_scaled_Plaus_per_region + scaled_Surprisaldist_per_region | Item), data = region_subset)
# print summary of the model
summary_per_region <- summary(model_per_region)
print(summary_per_region)
# calculate p-values
p_values_per_region <- summary_per_region$coefficients[, "Pr(>|t|)"]
new_row_p_value <- data.frame(Region = region,
p_value_plausibility_target = p_values_per_region[2],
p_value_surprisal_distractor = p_values_per_region[3])
p_values <- rbind(p_values, new_row_p_value) # add to p-values table
# extract intercept and coefficients (target plausibility and distractor surprisal) added to intercept
coefficients_per_region <- summary_per_region$coefficients
intercept <- coefficients_per_region["(Intercept)", 1]
plaus_target_coeff <- coefficients_per_region["(Intercept)", 1] + coefficients_per_region["inverted_scaled_Plaus_per_region", 1]
surprisal_distractor_coeff <- coefficients_per_region["(Intercept)", 1] + coefficients_per_region["scaled_Surprisaldist_per_region", 1]
# add error bars for intercept and coefficients (target plausibility and distractor surprisal)
new_row_coefficient <- data.frame(Region = region,
Estimate = "Intercept",
Estimate_value = intercept,
Estimate_error = coefficients_per_region["(Intercept)", 2],
Z_value = 0)
SPR_coefficients <- rbind(SPR_coefficients, new_row_coefficient) # add to coefficients table
new_row_coefficient <- data.frame(Region = region,
Estimate = "Plausability",
Estimate_value = plaus_target_coeff,
Estimate_error = coefficients_per_region["inverted_scaled_Plaus_per_region", 2],
Z_value = coefficients_per_region["inverted_scaled_Plaus_per_region", 1] / coefficients_per_region["inverted_scaled_Plaus_per_region", 2])
SPR_coefficients <- rbind(SPR_coefficients, new_row_coefficient) # add to coefficients table
new_row_coefficient <- data.frame(Region = region,
Estimate = "Surprisal",
Estimate_value = surprisal_distractor_coeff,
Estimate_error = coefficients_per_region["scaled_Surprisaldist_per_region", 2],
Z_value = coefficients_per_region["scaled_Surprisaldist_per_region", 1] / coefficients_per_region["scaled_Surprisaldist_per_region", 2])
SPR_coefficients <- rbind(SPR_coefficients, new_row_coefficient) # add to coefficients table
### loop through each of the 3 conditions ###
for (condition in conditions)
{
# extract subset for each condition
region_per_condition <- subset(region_subset, Condition == condition)
# predict logRTs for each condition separately, within each of the 4 regions
region_per_condition$region_per_condition_Predicted <- predict(model_per_region, newdata = region_per_condition,  type = "response")
# print observed mean logRTs
region_per_condition_logRT_observed <- mean(region_per_condition$logRT_per_region)
# print estimated mean logRTs
region_per_condition_logRT_estimated <- mean(region_per_condition$region_per_condition_Predicted, na.rm = TRUE)
# calculate residuals (observed logRTs - estimated logRTs)
Residual_region_per_condition <- mean(region_per_condition$logRT_per_region) - mean(region_per_condition$region_per_condition_Predicted, na.rm = TRUE)
# calculate standard error for residuals
SE_residuals_region_per_condition <- sqrt(sd(region_per_condition$logRT, na.rm = TRUE)^2/length(region_per_condition$logRT) + sd(region_per_condition$region_per_condition_Predicted, na.rm = TRUE)^2/length(region_per_condition$region_per_condition_Predicted))
# add to residuals table
new_row_residuals <- data.frame(Region = region, Condition = condition, Residual = Residual_region_per_condition, SE_Residual = SE_residuals_region_per_condition)
residuals <- rbind(residuals, new_row_residuals)
# calculate standard error for estimated logRTs
SE_estimated_region_per_condition <- sd(region_per_condition$region_per_condition_Predicted, na.rm = TRUE) / sqrt(length(region_per_condition$region_per_condition_Predicted))
# add to estimated logRTs table
new_row_logRT_estimated <- data.frame(Region = region, Condition = condition, Estimated_logRT = region_per_condition_logRT_estimated, SE_Estimated = SE_estimated_region_per_condition)
logRT_estimated <- rbind(logRT_estimated, new_row_logRT_estimated)
}
}
### VISUALIZATIONS ###
# Create a line plot for residuals
p <- ggplot(residuals, aes(x = factor(Region, levels = c("Pre-critical", "Critical", "Spillover", "Post-spillover")),
y = Residual, color = Condition, group = Condition)) + geom_point(shape = 4, size = 3.5, stroke = 0.4) + geom_line(linewidth=0.5) + ylim (0.10, -0.10)
p <- p + theme_minimal() + geom_errorbar(aes(ymin=Residual-SE_Residual, ymax=Residual+SE_Residual), width=.1, size=0.3)
p <- p + scale_color_manual(name="Condition", labels=c("A: Plausible", "B: Medium Plausible", "C: Implausible"), values=c("#000000", "#FF0000", "#0000FF"))
p <- p + labs(x="Region", y="logRT", title = "Residuals: Plausibility Target + Surprisal Distractor")
p <- p + theme(legend.position="bottom", legend.text=element_text(size=7), legend.title=element_text(size=7), axis.title.x = element_text(size = 14), axis.title.y = element_text(size = 14))
p
ggsave("Residuals_Plot.pdf", p, width=4, height=4)
# Create a line plot for estimated logRTs
p <- ggplot(logRT_estimated, aes(x = factor(Region, levels = c("Pre-critical", "Critical", "Spillover", "Post-spillover")),
y = Estimated_logRT, color = Condition, group = Condition)) + geom_point(shape = 4, size = 3.5, stroke = 0.4) + geom_line(linewidth=0.5) + ylim (5.4, 5.7)
p <- p + theme_minimal() + geom_errorbar(aes(ymin=Estimated_logRT-SE_Estimated, ymax=Estimated_logRT+SE_Estimated), width=.1, size=0.3)
p <- p + scale_color_manual(name="Condition", labels=c("A: Plausible", "B: Medium Plausible", "C: Implausible"), values=c("#000000", "#FF0000", "#0000FF"))
p <- p + labs(x="Region", y="logRT", title = "Estimated RTs")
p <- p + theme(legend.position="bottom", legend.text=element_text(size=7), legend.title=element_text(size=7), axis.title.x = element_text(size = 14), axis.title.y = element_text(size = 14))
p
ggsave("Estimated_RTs_Plot.pdf", p, width=4, height=4)
# Plot intercept and coefficients added to intercept
p <- ggplot(SPR_coefficients, aes(x = factor(Region, levels = c("Pre-critical", "Critical", "Spillover", "Post-spillover")),
y = Estimate_value, color = Estimate, group = Estimate)) + geom_point(shape = 4, size = 3.5, stroke = 0.4) + geom_line(linewidth=0.5) + ylim (5.5, 5.7)
p <- p + theme_minimal() + geom_errorbar(aes(ymin=Estimate_value-Estimate_error, ymax=Estimate_value+Estimate_error), width=.1, size=0.3)
p <- p + scale_color_manual(name="Coefficients", labels=c("Intercept", "Target Plausibility", "Distractor Surprisal"), values=c("#000000", "#FF00FF", "#00FFFF"))
p <- p + labs(x="Region", y="SPR Coefficients", title = "Coefficients")
p <- p + theme(legend.position="bottom", legend.text=element_text(size=7), legend.title=element_text(size=7), axis.title.x = element_text(size = 14), axis.title.y = element_text(size = 14))
p
ggsave("Intercept_Coefficients_Plot.pdf", p, width=4, height=4)
# plot effect sizes (z-vaues)
Effect_sizes <- subset(SPR_coefficients, Estimate != 'Intercept')
p <- ggplot(Effect_sizes, aes(x = factor(Region, levels = c("Pre-critical", "Critical", "Spillover", "Post-spillover")),
y = Z_value, color = Estimate, group = Estimate)) + geom_point(shape = 4, size = 3.5, stroke = 0.4) + geom_line(linewidth=0.5) + ylim (-5, 5)
p <- p + geom_hline(yintercept=0, linetype=2)
p <- p + theme_minimal()
p <- p + scale_color_manual(name="Coefficients", labels=c( "Target Plausibility", "Distractor Surprisal"), values=c("#FF00FF", "#00FFFF"))
p <- p + labs(x="Region", y="Z-values", title = "Inferential Statistics")
p <- p + theme(legend.position="bottom", legend.text=element_text(size=7), legend.title=element_text(size=7), axis.title.x = element_text(size = 14), axis.title.y = element_text(size = 14))
p
ggsave("Z_values_Plot.pdf", p, width=4, height=4)
library(data.table)
library(dplyr)
library(Kendall)
setwd("~/Downloads/Master_Thesis/3_SPR_Study/Results_SPR_Plaus_Leo_LM/")
dt <- fread("GP6SPR_processed.csv")
vars <- dt[, c("Plaus_target_avg", "Plaus_dist_avg", "Leo_LM_tar", "Leo_LM_dist", "SPR_Plaus_Rating", "SPR_Plaus_avg")]
vars <- dt[, c("Plaus_target_avg", "Plaus_dist_avg", "LeoLM_tar", "LeoLM_dist", "SPR_Plaus_Rating", "SPR_Plaus_avg")]
# Correlation Matrix (Pearson Correlation) #exclude single ratings SPR_Plaus_Rating from SPR study in correlation calculations?
correlation_matrix_pearson <- cor(vars)
correlation_matrix_pearson
# Correlation Matrix (Spearman'r rho)
correlation_matrix_spearman <- cor(vars, method = "spearman")
correlation_matrix_spearman
# Correlation Matrix (Kendall's tau)
correlation_matrix_kendall <- cor(vars, method = "kendall")
correlation_matrix_kendall
library(data.table)
setwd("~/Downloads/Master_Thesis/2_Surprisal_Values")
dt <- fread("eva_leo13b_surprisals.csv")
# Add Condition and TarDist columns
dt$Condition <- rep(c("A", "A", "B", "B", "C", "C"), 60)
dt$TarDist <- rep(c("Target", "Distractor"), 180)
# average surprisal per condition
#mean_condition_target <- aggregate(GPT2_s ~ Condition + TarDist, dt, mean)
mean_condition <- aggregate(leo13b_s ~ Condition + TarDist, dt, mean)
mean_condition
# standard deviations per condition
sd_condition <- aggregate(leo13b_s ~ Condition  + TarDist, data = dt, FUN = "sd")
sd_condition
# ranges per condition
range_condition <- aggregate(leo13b_s ~ Condition  + TarDist, data = dt, FUN = "range")
range_condition
library(data.table)
setwd("~/Downloads/Master_Thesis/2_Surprisal_Values")
dt <- fread("FollowUp_GPT2_surprisals.csv")
# Add Condition and TarDist columns
dt$Condition <- rep(c("A", "A", "B", "B", "C", "C"), 60)
dt$TarDist <- rep(c("Target", "Distractor"), 180)
# average surprisal per condition
#mean_condition_target <- aggregate(GPT2_s ~ Condition + TarDist, dt, mean)
mean_condition <- aggregate(GPT2_s_sep ~ Condition + TarDist, dt, mean)
mean_condition
# Plaus Data Viz
library(ggplot2)
library(data.table)
# functions
se <- function(
x,
na.rm = FALSE
){
if (na.rm == TRUE) {
sd(x, na.rm=TRUE)/sqrt(length(x[!is.na(x)]))
} else {
sd(x)/sqrt(length(x))
}
}
setwd("~/Downloads/Master_Thesis/2_Surprisal_Values/")
dt <- fread("FollowUp_GPT2_surprisals_edited.csv")
dt <- dt[!(Surprisal_Target %in% NA & Surprisal_Distractor %in% NA),]
### TARGET SURPRISAL ###
# ABC
means <- aggregate(Surprisal_Target ~ Condition, dt, FUN=mean)
means$Plaus_SE <- aggregate(Surprisal_Target ~ Condition, dt, FUN=se)$Surprisal_Target
dt_items_abc <- dt[, lapply(.SD, mean), by=list(Item, Condition), .SDcols=c("Surprisal_Target")]
# density plot
p1 <- ggplot(dt_items_abc, aes(x=Surprisal_Target, color=Condition, fill=Condition)) + geom_density(alpha=0.4) + theme_minimal() + ylim(0, 0.5)
p1 <- p1 + geom_vline(data=means, aes(xintercept=Surprisal_Target, color=Condition), linetype="dashed") + scale_x_continuous(breaks=seq(0, 20, by = 2))
p1 <- p1 + scale_color_manual(labels=c("A", "B", "C"), values=c("black", "red", "blue"))
p1 <- p1 + scale_fill_manual(labels=c("A", "B", "C"), values=c("black", "red", "blue"))
p1 <- p1 + labs(title = "Target Surprisal", y="Density", x= "Surprisal")
ggsave("DensityPlot_Surprisal_Target.pdf", p1, device=cairo_pdf, width=4, height=4)
p1
# barplot
q1 <- ggplot(means, aes(x=Condition, y=Surprisal_Target)) + geom_bar(stat="identity") + labs(title = "Average Surprisal Values per Condition (Target)", y = "Surprisal", x = "Condition") + geom_errorbar(aes(ymin=Surprisal_Target-Plaus_SE, ymax=Surprisal_Target+Plaus_SE), width=.4, position=position_dodge(.9)) + theme_minimal() + coord_cartesian(ylim = c(1, 8)) + scale_y_continuous(breaks = c(1:8))
ggsave("BarPlot_Surprisal_Target.pdf", q1, device=cairo_pdf, width=4, height=4)
q1
### DISTRACTOR SURPRISAL ###
# AdBdCd
means <- aggregate(Surprisal_Distractor ~ Condition, dt, FUN=mean)
means$Plaus_distractor_SE <- aggregate(Surprisal_Distractor ~ Condition, dt, FUN=se)$Surprisal_Distractor
dt_items_d <- dt[, lapply(.SD, mean), by=list(Item, Condition), .SDcols=c("Surprisal_Distractor")]
# density plot
p1 <- ggplot(dt_items_d, aes(x=Surprisal_Distractor, color=Condition, fill=Condition)) + geom_density(alpha=0.4) + theme_minimal() + ylim(0, 0.5)
p1 <- p1 + geom_vline(data=means, aes(xintercept=Surprisal_Distractor, color=Condition), linetype="dashed") + scale_x_continuous(breaks=seq(0, 25, by = 2))
p1 <- p1 + scale_color_manual(labels=c("A", "B", "C"), values=c("black", "red", "blue"))
p1 <- p1 + scale_fill_manual(labels=c("A", "B", "C"), values=c("black", "red", "blue"))
p1 <- p1 + labs(title = "Distractor Surprisal", y = "Density", x="Surprisal")
ggsave("DensityPlot_Surprisal_Distractor.pdf", p1, device=cairo_pdf, width=4, height=4)
p1
# barplot
q1 <- ggplot(means, aes(x=Condition, y=Surprisal_Distractor)) + geom_bar(stat="identity") + labs(title = "Average Surprisal Values per Condition (Distractor)", y = "Surprisal", x = "Condition") + geom_errorbar(aes(ymin=Surprisal_Distractor-Plaus_distractor_SE, ymax=Surprisal_Distractor+Plaus_distractor_SE), width=.4, position=position_dodge(.9)) + theme_minimal() + coord_cartesian(ylim = c(1, 8)) + scale_y_continuous(breaks = c(1:8))
ggsave("BarPlot_Surprisal_Distractor.pdf", q1, device=cairo_pdf, width=4, height=4)
q1
# Plaus Data Viz
library(ggplot2)
library(data.table)
# functions
se <- function(
x,
na.rm = FALSE
){
if (na.rm == TRUE) {
sd(x, na.rm=TRUE)/sqrt(length(x[!is.na(x)]))
} else {
sd(x)/sqrt(length(x))
}
}
setwd("~/Downloads/Master_Thesis/2_Surprisal_Values/")
dt <- fread("FollowUp_GPT2_surprisals_edited.csv")
dt <- dt[!(Surprisal_Target %in% NA & Surprisal_Distractor %in% NA),]
### TARGET SURPRISAL ###
# ABC
means <- aggregate(Surprisal_Target ~ Condition, dt, FUN=mean)
means$Plaus_SE <- aggregate(Surprisal_Target ~ Condition, dt, FUN=se)$Surprisal_Target
dt_items_abc <- dt[, lapply(.SD, mean), by=list(Item, Condition), .SDcols=c("Surprisal_Target")]
# density plot
p1 <- ggplot(dt_items_abc, aes(x=Surprisal_Target, color=Condition, fill=Condition)) + geom_density(alpha=0.4) + theme_minimal() + ylim(0, 0.5)
p1 <- p1 + geom_vline(data=means, aes(xintercept=Surprisal_Target, color=Condition), linetype="dashed") + scale_x_continuous(breaks=seq(0, 20, by = 2))
p1 <- p1 + scale_color_manual(labels=c("A", "B", "C"), values=c("black", "red", "blue"))
p1 <- p1 + scale_fill_manual(labels=c("A", "B", "C"), values=c("black", "red", "blue"))
p1 <- p1 + labs(title = "Target Surprisal", y="Density", x= "Surprisal")
ggsave("DensityPlot_Surprisal_Target.pdf", p1, device=cairo_pdf, width=4, height=4)
p1
# barplot
q1 <- ggplot(means, aes(x=Condition, y=Surprisal_Target)) + geom_bar(stat="identity") + labs(title = "Average Surprisal Values per Condition (Target)", y = "Surprisal", x = "Condition") + geom_errorbar(aes(ymin=Surprisal_Target-Plaus_SE, ymax=Surprisal_Target+Plaus_SE), width=.4, position=position_dodge(.9)) + theme_minimal() + coord_cartesian(ylim = c(1, 8)) + scale_y_continuous(breaks = c(1:8))
ggsave("BarPlot_Surprisal_Target.pdf", q1, device=cairo_pdf, width=4, height=4)
q1
### DISTRACTOR SURPRISAL ###
# AdBdCd
means <- aggregate(Surprisal_Distractor ~ Condition, dt, FUN=mean)
means$Plaus_distractor_SE <- aggregate(Surprisal_Distractor ~ Condition, dt, FUN=se)$Surprisal_Distractor
dt_items_d <- dt[, lapply(.SD, mean), by=list(Item, Condition), .SDcols=c("Surprisal_Distractor")]
# density plot
p1 <- ggplot(dt_items_d, aes(x=Surprisal_Distractor, color=Condition, fill=Condition)) + geom_density(alpha=0.4) + theme_minimal() + ylim(0, 0.5)
p1 <- p1 + geom_vline(data=means, aes(xintercept=Surprisal_Distractor, color=Condition), linetype="dashed") + scale_x_continuous(breaks=seq(0, 25, by = 2))
p1 <- p1 + scale_color_manual(labels=c("A", "B", "C"), values=c("black", "red", "blue"))
p1 <- p1 + scale_fill_manual(labels=c("A", "B", "C"), values=c("black", "red", "blue"))
p1 <- p1 + labs(title = "Distractor Surprisal", y = "Density", x="Surprisal")
ggsave("DensityPlot_Surprisal_Distractor.pdf", p1, device=cairo_pdf, width=4, height=4)
p1
# barplot
q1 <- ggplot(means, aes(x=Condition, y=Surprisal_Distractor)) + geom_bar(stat="identity") + labs(title = "Average Surprisal Values per Condition (Distractor)", y = "Surprisal", x = "Condition") + geom_errorbar(aes(ymin=Surprisal_Distractor-Plaus_distractor_SE, ymax=Surprisal_Distractor+Plaus_distractor_SE), width=.4, position=position_dodge(.9)) + theme_minimal() + coord_cartesian(ylim = c(1, 8)) + scale_y_continuous(breaks = c(1:8))
ggsave("BarPlot_Surprisal_Distractor.pdf", q1, device=cairo_pdf, width=4, height=4)
# Plaus Data Viz
library(ggplot2)
library(data.table)
# functions
se <- function(
x,
na.rm = FALSE
){
if (na.rm == TRUE) {
sd(x, na.rm=TRUE)/sqrt(length(x[!is.na(x)]))
} else {
sd(x)/sqrt(length(x))
}
}
setwd("~/Downloads/Master_Thesis/2_Surprisal_Values/")
dt <- fread("GradedP6_FollowUpStudy_Pretests.csv")
dt <- dt[!(LeoLM_tar %in% NA & LeoLM_dist %in% NA),]
### TARGET SURPRISAL ###
# ABC
means <- aggregate(LeoLM_tar ~ Condition, dt, FUN=mean)
means$Plaus_SE <- aggregate(LeoLM_tar ~ Condition, dt, FUN=se)$LeoLM_tar
dt_items_abc <- dt[, lapply(.SD, mean), by=list(Item, Condition), .SDcols=c("LeoLM_tar")]
# density plot
p1 <- ggplot(dt_items_abc, aes(x=LeoLM_tar, color=Condition, fill=Condition)) + geom_density(alpha=0.4) + theme_minimal() + ylim(0, 0.5)
p1 <- p1 + geom_vline(data=means, aes(xintercept=LeoLM_tar, color=Condition), linetype="dashed") + scale_x_continuous(breaks=seq(0, 20, by = 2))
p1 <- p1 + scale_color_manual(labels=c("A", "B", "C"), values=c("black", "red", "blue"))
p1 <- p1 + scale_fill_manual(labels=c("A", "B", "C"), values=c("black", "red", "blue"))
p1 <- p1 + labs(title = "Target Surprisal", y="Density", x= "Surprisal")
ggsave("DensityPlot_LeoLM_tar.pdf", p1, device=cairo_pdf, width=4, height=4)
p1
# barplot
q1 <- ggplot(means, aes(x=Condition, y=LeoLM_tar)) + geom_bar(stat="identity") + labs(title = "Average Surprisal Values per Condition (Target)", y = "Surprisal", x = "Condition") + geom_errorbar(aes(ymin=LeoLM_tar-Plaus_SE, ymax=LeoLM_tar+Plaus_SE), width=.4, position=position_dodge(.9)) + theme_minimal() + coord_cartesian(ylim = c(1, 8)) + scale_y_continuous(breaks = c(1:8))
ggsave("BarPlot_LeoLM_tar.pdf", q1, device=cairo_pdf, width=4, height=4)
q1
### DISTRACTOR SURPRISAL ###
# AdBdCd
means <- aggregate(LeoLM_dist ~ Condition, dt, FUN=mean)
means$Plaus_distractor_SE <- aggregate(LeoLM_dist ~ Condition, dt, FUN=se)$LeoLM_dist
dt_items_d <- dt[, lapply(.SD, mean), by=list(Item, Condition), .SDcols=c("LeoLM_dist")]
# density plot
p1 <- ggplot(dt_items_d, aes(x=LeoLM_dist, color=Condition, fill=Condition)) + geom_density(alpha=0.4) + theme_minimal() + ylim(0, 0.5)
p1 <- p1 + geom_vline(data=means, aes(xintercept=LeoLM_dist, color=Condition), linetype="dashed") + scale_x_continuous(breaks=seq(0, 25, by = 2))
p1 <- p1 + scale_color_manual(labels=c("A", "B", "C"), values=c("black", "red", "blue"))
p1 <- p1 + scale_fill_manual(labels=c("A", "B", "C"), values=c("black", "red", "blue"))
p1 <- p1 + labs(title = "Distractor Surprisal", y = "Density", x="Surprisal")
ggsave("DensityPlot_LeoLM_dist.pdf", p1, device=cairo_pdf, width=4, height=4)
p1
# barplot
q1 <- ggplot(means, aes(x=Condition, y=LeoLM_dist)) + geom_bar(stat="identity") + labs(title = "Average Surprisal Values per Condition (Distractor)", y = "Surprisal", x = "Condition") + geom_errorbar(aes(ymin=LeoLM_dist-Plaus_distractor_SE, ymax=LeoLM_dist+Plaus_distractor_SE), width=.4, position=position_dodge(.9)) + theme_minimal() + coord_cartesian(ylim = c(1, 8)) + scale_y_continuous(breaks = c(1:8))
ggsave("BarPlot_LeoLM_dist.pdf", q1, device=cairo_pdf, width=4, height=4)
q1
# Plaus Data Viz
library(ggplot2)
library(data.table)
# functions
se <- function(
x,
na.rm = FALSE
){
if (na.rm == TRUE) {
sd(x, na.rm=TRUE)/sqrt(length(x[!is.na(x)]))
} else {
sd(x)/sqrt(length(x))
}
}
setwd("~/Downloads/Master_Thesis/2_Surprisal_Values/")
dt <- fread("GradedP6_FollowUpStudy_Pretests.csv")
dt <- dt[!(LeoLM_tar %in% NA & LeoLM_dist %in% NA),]
### TARGET SURPRISAL ###
# ABC
means <- aggregate(LeoLM_tar ~ Condition, dt, FUN=mean)
means$Plaus_SE <- aggregate(LeoLM_tar ~ Condition, dt, FUN=se)$LeoLM_tar
dt_items_abc <- dt[, lapply(.SD, mean), by=list(Item, Condition), .SDcols=c("LeoLM_tar")]
# density plot
p1 <- ggplot(dt_items_abc, aes(x=LeoLM_tar, color=Condition, fill=Condition)) + geom_density(alpha=0.4) + theme_minimal() + ylim(0, 0.5)
p1 <- p1 + geom_vline(data=means, aes(xintercept=LeoLM_tar, color=Condition), linetype="dashed") + scale_x_continuous(breaks=seq(0, 20, by = 2))
p1 <- p1 + scale_color_manual(labels=c("A", "B", "C"), values=c("black", "red", "blue"))
p1 <- p1 + scale_fill_manual(labels=c("A", "B", "C"), values=c("black", "red", "blue"))
p1 <- p1 + labs(title = "Target Surprisal", y="Density", x= "Surprisal")
ggsave("DensityPlot_LeoLM_tar.pdf", p1, device=cairo_pdf, width=4, height=4)
p1
# barplot
q1 <- ggplot(means, aes(x=Condition, y=LeoLM_tar)) + geom_bar(stat="identity") + labs(title = "Average Surprisal Values per Condition (Target)", y = "Surprisal", x = "Condition") + geom_errorbar(aes(ymin=LeoLM_tar-Plaus_SE, ymax=LeoLM_tar+Plaus_SE), width=.4, position=position_dodge(.9)) + theme_minimal() + coord_cartesian(ylim = c(1, 8)) + scale_y_continuous(breaks = c(1:8))
ggsave("BarPlot_LeoLM_tar.pdf", q1, device=cairo_pdf, width=4, height=4)
q1
### DISTRACTOR SURPRISAL ###
# AdBdCd
means <- aggregate(LeoLM_dist ~ Condition, dt, FUN=mean)
means$Plaus_distractor_SE <- aggregate(LeoLM_dist ~ Condition, dt, FUN=se)$LeoLM_dist
dt_items_d <- dt[, lapply(.SD, mean), by=list(Item, Condition), .SDcols=c("LeoLM_dist")]
# density plot
p1 <- ggplot(dt_items_d, aes(x=LeoLM_dist, color=Condition, fill=Condition)) + geom_density(alpha=0.4) + theme_minimal() + ylim(0, 0.5)
p1 <- p1 + geom_vline(data=means, aes(xintercept=LeoLM_dist, color=Condition), linetype="dashed") + scale_x_continuous(breaks=seq(0, 25, by = 2))
p1 <- p1 + scale_color_manual(labels=c("A", "B", "C"), values=c("black", "red", "blue"))
p1 <- p1 + scale_fill_manual(labels=c("A", "B", "C"), values=c("black", "red", "blue"))
p1 <- p1 + labs(title = "Distractor Surprisal", y = "Density", x="Surprisal")
ggsave("DensityPlot_LeoLM_dist.pdf", p1, device=cairo_pdf, width=4, height=4)
p1
# barplot
q1 <- ggplot(means, aes(x=Condition, y=LeoLM_dist)) + geom_bar(stat="identity") + labs(title = "Average Surprisal Values per Condition (Distractor)", y = "Surprisal", x = "Condition") + geom_errorbar(aes(ymin=LeoLM_dist-Plaus_distractor_SE, ymax=LeoLM_dist+Plaus_distractor_SE), width=.4, position=position_dodge(.9)) + theme_minimal() + coord_cartesian(ylim = c(1, 8)) + scale_y_continuous(breaks = c(1:8))
ggsave("BarPlot_LeoLM_dist.pdf", q1, device=cairo_pdf, width=4, height=4)
q1
library(data.table)
setwd("~/Downloads/Master_Thesis/2_Surprisal_Values")
dt <- fread("FollowUp_GPT2_surprisals.csv")
# Add Condition and TarDist columns
dt$Condition <- rep(c("A", "A", "B", "B", "C", "C"), 60)
dt$TarDist <- rep(c("Target", "Distractor"), 180)
# average surprisal per condition
#mean_condition_target <- aggregate(GPT2_s ~ Condition + TarDist, dt, mean)
mean_condition <- aggregate(GPT2_s_sep ~ Condition + TarDist, dt, mean)
mean_condition
library(data.table)
setwd("~/Downloads/Master_Thesis/2_Surprisal_Values")
dt <- fread("eva_leo13b_surprisals.csv")
# Add Condition and TarDist columns
dt$Condition <- rep(c("A", "A", "B", "B", "C", "C"), 60)
dt$TarDist <- rep(c("Target", "Distractor"), 180)
# average surprisal per condition
#mean_condition_target <- aggregate(GPT2_s ~ Condition + TarDist, dt, mean)
mean_condition <- aggregate(leo13b_s ~ Condition + TarDist, dt, mean)
mean_condition
library(data.table)
setwd("~/Downloads/Master_Thesis/2_Surprisal_Values")
dt <- fread("FollowUp_GPT2_surprisals.csv")
# Add Condition and TarDist columns
dt$Condition <- rep(c("A", "A", "B", "B", "C", "C"), 60)
dt$TarDist <- rep(c("Target", "Distractor"), 180)
# average surprisal per condition
#mean_condition_target <- aggregate(GPT2_s ~ Condition + TarDist, dt, mean)
mean_condition <- aggregate(GPT2_s_sep ~ Condition + TarDist, dt, mean)
mean_condition
# Plaus Data Viz
library(ggplot2)
library(data.table)
# functions
se <- function(
x,
na.rm = FALSE
){
if (na.rm == TRUE) {
sd(x, na.rm=TRUE)/sqrt(length(x[!is.na(x)]))
} else {
sd(x)/sqrt(length(x))
}
}
setwd("~/Downloads/Master_Thesis/2_Surprisal_Values/")
dt <- fread("FollowUp_GPT2_surprisals_edited.csv")
dt <- dt[!(Surprisal_Target %in% NA & Surprisal_Distractor %in% NA),]
### TARGET SURPRISAL ###
# ABC
means <- aggregate(Surprisal_Target ~ Condition, dt, FUN=mean)
means$Plaus_SE <- aggregate(Surprisal_Target ~ Condition, dt, FUN=se)$Surprisal_Target
dt_items_abc <- dt[, lapply(.SD, mean), by=list(Item, Condition), .SDcols=c("Surprisal_Target")]
# density plot
p1 <- ggplot(dt_items_abc, aes(x=Surprisal_Target, color=Condition, fill=Condition)) + geom_density(alpha=0.4) + theme_minimal() + ylim(0, 0.5)
p1 <- p1 + geom_vline(data=means, aes(xintercept=Surprisal_Target, color=Condition), linetype="dashed") + scale_x_continuous(breaks=seq(0, 20, by = 2))
p1 <- p1 + scale_color_manual(labels=c("A", "B", "C"), values=c("black", "red", "blue"))
p1 <- p1 + scale_fill_manual(labels=c("A", "B", "C"), values=c("black", "red", "blue"))
p1 <- p1 + labs(title = "Target Surprisal", y="Density", x= "Surprisal")
ggsave("DensityPlot_Surprisal_Target.pdf", p1, device=cairo_pdf, width=4, height=4)
p1
# barplot
q1 <- ggplot(means, aes(x=Condition, y=Surprisal_Target)) + geom_bar(stat="identity") + labs(title = "Average Surprisal Values per Condition (Target)", y = "Surprisal", x = "Condition") + geom_errorbar(aes(ymin=Surprisal_Target-Plaus_SE, ymax=Surprisal_Target+Plaus_SE), width=.4, position=position_dodge(.9)) + theme_minimal() + coord_cartesian(ylim = c(1, 8)) + scale_y_continuous(breaks = c(1:8))
ggsave("BarPlot_Surprisal_Target.pdf", q1, device=cairo_pdf, width=4, height=4)
q1
